
// Dependencies

var ObjectID = require('mongodb').ObjectID;
var BBO = require('bluebirds').Object;
var async = require('async');


// Internal requires

// ... add here ...

/***********************************************************************************************************************
 * BaseModel
 ***********************************************************************************************************************
 *
 * Generic implementation of an ORM-like base model.
 *
 * To create a new model inheriting from BaseModel:
 *
 * var Foo = BaseModel.extend({
 *   // add properties and methods here
 *   bar: 'baz',
 *   speak: function() {
 *     console.log(this.bar);
 *   }
 * },
 * {
 *
 *   _collectionName: 'foos'   // the collection name in MongoDB
 *
 *   // add static properties and methods here
 *
 * })
 *
 **********************************************************************************************************************/
var BaseModel = BBO.extend({

    /**
     * save
     *
     * @info saves into the users collection
     *
     * @param callback
     * @returns {*|Session}
     */
    save: function(callback) {
      return this.constructor.getCollection().save(this, callback);
    }
  },

  /**
  static attributes:
  **/

  {

    _collectionName: null,
    _db: null,

    /**
     * create
     *
     * @info initialization comportment setting for different formats of input parameters
     * @param def
     */
    create: function(def){
      // convert _id as a Mongo ID if provided
      if (def._id) {
        def._id = new ObjectID(def._id);  // works also if def._id is already an ObjectID
      }
      return this._super(def);

    },

    getCollection: function() {
      if (!this._collectionName) throw new Error('Undefined collection name');
      return this._db.collection(this._collectionName);
    },

    /**
     * findOne
     *
     * @param filter
     * @param callback
     * @returns {*}
     */
    findOne: function() {
      var self = this;
      var collection = this.getCollection();

      /* retreat BaseModel.findOne arguments to give them to collection.findOne */

      var args = Array.prototype.slice.call(arguments);
      // retrieve the original callback:
      var innerCb = args.pop();
      // use it to create a new callback making conversion into a valid BaseModel
      var outerCb = function(err, item) {
        if (err) return innerCb(err);
        if (!item) return innerCb(new Error('Not found'));
        return innerCb(err, self.create(item));
      };
      args.push(outerCb);
      // BaseModel.findOne is now a wrapper for collection.findOne
      return collection.findOne.apply(collection, args)
    },

    /**
     * findById
     *
     * @param id
     * @param callback
     * @returns {*}
     */
    findById: function(id, callback) {
      // Important: make the conversion into a valid Mongo ID before searching
      return this.findOne({_id: new ObjectID(id)}, callback);
    },

    /**
     * count
     *
     * @param query
     * @param callback
     * @returns {*|null}
     */
    count: function(query, callback) {
      return this.getCollection().count(query, callback);
    },

    /**
     * remove
     *
     * @param query
     * @param callback
     * @returns {*}
     */
    remove: function(query, callback) {
      return this.getCollection().remove(query, callback);
    }

  }
);


module.exports = BaseModel;